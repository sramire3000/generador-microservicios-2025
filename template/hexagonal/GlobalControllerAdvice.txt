package com.example.demo.infrastructure.adapters.input.rest;

import java.time.LocalDateTime;
import java.util.Collections;
//import java.util.stream.Collectors;

//import org.springframework.context.support.DefaultMessageSourceResolvable;
//import org.springframework.validation.BindingResult;
//import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import com.example.demo.domain.model.ErrorResponse;
import com.example.demo.utils.ErrorCatalog;

//import com.example.demo.domain.exception.StudentNotFoundException;

@RestControllerAdvice
public class GlobalControllerAdvice {

	//Errores Genericos
	@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
	@ExceptionHandler(Exception.class)
	public ErrorResponse handleGenericError(Exception exception) {
		return ErrorResponse.builder()
				.code(ErrorCatalog.GENERIC_ERROR.getCode())
				.message(ErrorCatalog.GENERIC_ERROR.getMessage())
				.details(Collections.singletonList(exception.getMessage()))
				.timestamp(LocalDateTime.now())
				.build();		
	}
	
	/*
	@ResponseStatus(HttpStatus.NOT_FOUND)
	@ExceptionHandler(StudentNotFoundException.class)
	public ErrorResponse handleStudentNotFoundException() {
		return ErrorResponse.builder()
				.code(ErrorCatalog.STUDENT_NOT_FOUND.getCode())
				.message(ErrorCatalog.STUDENT_NOT_FOUND.getMessage())
				.timestamp(LocalDateTime.now())
				.build();
	}
    */
	
	/*
	@ResponseStatus(HttpStatus.BAD_REQUEST)
	@ExceptionHandler(MethodArgumentNotValidException.class)
	public ErrorResponse methodArgumentNotValidException(MethodArgumentNotValidException exception) {
		
		BindingResult result = exception.getBindingResult();
		
		return ErrorResponse.builder()
				.code(ErrorCatalog.INVALID_STUDENT.getCode())
				.message(ErrorCatalog.INVALID_STUDENT.getMessage())
				.details(result.getFieldErrors()
							.stream()
							.map(DefaultMessageSourceResolvable::getDefaultMessage)
							.collect(Collectors.toList())
							)
				.timestamp(LocalDateTime.now())
				.build();
	}	
	*/
	
}
