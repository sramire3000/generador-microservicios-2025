package ${myUtil.packageName}.infrastructure.adapters.input.rest;

import java.util.List;

import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.RequestMapping;

import jakarta.validation.Valid;

import lombok.RequiredArgsConstructor;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import ${myUtil.packageName}.application.ports.input.I${myUtil.entityClassName}ServicePort;
import ${myUtil.packageName}.infrastructure.adapters.input.rest.mapper.I${myUtil.entityClassName}RestMapper;
import ${myUtil.packageName}.infrastructure.adapters.input.rest.model.request.${myUtil.entityClassName}CreateRequest;
import ${myUtil.packageName}.infrastructure.adapters.input.rest.model.response.${myUtil.entityClassName}Response;

@RestController
@RequiredArgsConstructor
@CrossOrigin(origins = "*")
@RequestMapping("/${myUtil.entityName}")
public class ${myUtil.entityClassName}RestAdapter {

    //Para el log
    private Logger log = LoggerFactory.getLogger(${myUtil.entityClassName}RestAdapter.class);
    
	private final I${myUtil.entityClassName}ServicePort serviceport;
	private final I${myUtil.entityClassName}RestMapper restMapper;    

    
	/* Metodo listar todos con pagineo */
    @GetMapping("/v1/api")
    public List<${myUtil.entityClassName}Response> findAll() {
    
        log.info("REST request to get all ${myUtil.entityClassName}");
    	
		//Resultado
		return restMapper.to${myUtil.entityClassName}ResponeList(serviceport.findAll());
    }
    
	/* Metodo buscar por Id */
	@GetMapping("/v1/api/${myUtil.entityName}/{<%for(attr in myUtil.list){
			                                if(attr.isPk == true){
			                                   %>${attr.name}<%
			                                }
		                                }%>}")
    public ${myUtil.entityClassName}Response findId(@PathVariable <%for(attr in myUtil.list){
			                                          if(attr.isPk == true){
			                                             %>${attr.type} ${attr.name}<%
			                                          }
		                                            }%>) throws Exception {
    
    	log.info("REST request to get ${myUtil.entityClassName} : {}", <%for(attr in myUtil.list){
			                                                               if(attr.isPk == true){
			                                                                  %>${attr.name}<%
			                                                               }
		                                                                }%>);
    	
        return restMapper.to${myUtil.entityClassName}Response(serviceport.findById(id));
    }
   

	/* Metodo Guardar */
    @PostMapping("/v1/api")
    public ResponseEntity<${myUtil.entityClassName}Response> save(@Valid @RequestBody ${myUtil.entityClassName}CreateRequest request) {
    
        log.info("REST request to save ${myUtil.entityClassName} : {}", request);
   
		return ResponseEntity.status(HttpStatus.CREATED)
				.body(restMapper.to${myUtil.entityClassName}Response(
					serviceport.save(restMapper.to${myUtil.entityClassName}(request))
				));
    }
   
	/* Metodo Update */
    @PutMapping("/v1/api/{<%
		for(attr in myUtil.list){
			if(attr.isPk == true){
			 %>${attr.name}<%
			}
		}             
		%>}")
    public ${myUtil.entityClassName}Response update(@Valid @RequestBody ${myUtil.entityClassName}CreateRequest request, @PathVariable <%for(attr in myUtil.list){
                                                                                                                      	if(attr.isPk == true){
	                                                                                                                       %>${attr.type} ${attr.name}<%
	                                                                                                                    }
                                                                                                                      }%>) {
    
    	log.info("REST request to update ${myUtil.entityClassName} : {}, {}", <%for(attr in myUtil.list){
	                                                                               if(attr.isPk == true){
                                                                                 	 %>${attr.name}<%
	                                                                               }
                                                                                }%>, request);
                                                                                
		return restMapper.to${myUtil.entityClassName}Response(
				serviceport.update(restMapper.to${myUtil.entityClassName}(request), id)
		);
    }
   
   
	/* Metodo Delete */
    @DeleteMapping("/v1/api/{<%
		for(attr in myUtil.list){
			if(attr.isPk == true){
			 %>${attr.name}<%
			}
		}             
		%>}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    public void delete(@PathVariable <%for(attr in myUtil.list){
	                                     if(attr.isPk == true){
	                                       %>${attr.type} ${attr.name}<%
	                                     }
                                       }             
       %>) {
    
       log.info("REST request to delete ${myUtil.entityClassName} : {}", <%for(attr in myUtil.list){
	                                                                          if(attr.isPk == true){
	                                                                             %>${attr.name}<%
	                                                                          }
                                                                             }             
                                                                          %>); 
	   serviceport.deleteById(<%for(attr in myUtil.list){
	                                             if(attr.isPk == true){
	                                                 %>${attr.name}<%
	                                             }
                                                }%>);	   
    }
    
<%
    for(attr in myUtil.list){
    
    	if (attr.type=="String"){
    		if (attr.isFindLike == true){
    		    println("");
    		    println("    /* Busqueda por "+ attr.description +" */");
    		    %>    @GetMapping("/v1/api/${attr.name}/{${attr.name}}")<%
    		    println("");
    		    %>    public List<${myUtil.entityClassName}Response> find${attr.camelCaseName}(@PathVariable String ${attr.name}) {<%
    		    println("");
                %>
        //Retornando respuesta
        return restMapper.to${myUtil.entityClassName}ResponeList(serviceport.findBy${attr.camelCaseName}(${attr.name}));
    }<%
               println("");
    		}
    	} 
    	
    	if (attr.type=="ManyToOne"){
    		if (attr.isFind == true){
    		    println("");
    		    println("");
    		    println("    //Busqueda por "+attr.nombre_lower);
    		    %>    @GetMapping("/v1/api/${attr.nombre_lower}/{${attr.nombre_lower}}")<% 		
    		    println("");
    		    %>    public List<${myUtil.entityClassName}Response> find${attr.camelCaseName}(@PathVariable Long ${attr.nombre_lower}) {<%
    		    println("");
                %>
    	
    	//Consulta al servicio
    	return restMapper.to${myUtil.entityClassName}ResponeList(${myUtil.entityName}serviceport.findBy${attr.camelCaseName}(${attr.nombre_lower}));
    }<%  		
    		    
    		}
    	}
        
    }	
%>    
   
}